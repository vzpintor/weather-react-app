{"version":3,"sources":["componentes/AddCity.js","helpers/getWeather.js","componentes/WeatherComponent.js","componentes/CityGrid.js","hooks/useFetchWeathers.js","CitiesApp.js","index.js"],"names":["AddCity","setCities","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","city","type","value","onChange","target","getWeather","a","url","encodeURI","fetch","response","json","list","map","weather","id","dt","day","dt_txt","temperature","main","temp","humidity","icon","description","WeatherComponent","className","src","alt","CityGrid","data","loading","state","setState","useEffect","then","useFetchWeather","weathers","console","log","role","CitiesApp","cities","ReactDOM","render","document","getElementById"],"mappings":"iMAGaA,EAAU,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAAgB,EACJC,mBAAS,IADL,mBACjCC,EADiC,KACrBC,EADqB,KAgBxC,OACE,sBAAMC,SAVa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAU,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACpCN,EAAc,MAKhB,SACE,uBAAOO,KAAM,OAAQC,MAAOT,EAAYU,SAflB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCPdG,EAAU,uCAAG,WAAOL,GAAP,qBAAAM,EAAA,6DAClBC,EADkB,6DAC0CC,UAChER,GAFsB,yEAKDS,MAAMF,GALL,cAKlBG,EALkB,gBAMDA,EAASC,OANR,mBAMhBC,EANgB,EAMhBA,KANgB,0CASf,IATe,iCAWjBA,EAAKC,KAAI,SAACC,GACf,MAAO,CACLC,GAAID,EAAQE,GACZC,IAAKH,EAAQI,OACbC,YAAaL,EAAQM,KAAKC,KAC1BC,SAAUR,EAAQM,KAAKE,SACvBC,KAAMT,EAAQA,QAAQ,GAAGS,KACzBC,YAAaV,EAAQA,QAAQ,GAAGU,YAChCV,QAASA,EAAQA,QAAQ,GAAGM,UAnBR,4CAAH,sDCEVK,EAAmB,SAACX,GAC/B,OACE,qBAAKY,UAAU,kCAAf,SACE,qBAAKA,UAAU,mDAAf,SACE,sBAAKA,UAAU,YAAf,UACE,qBAAKA,UAAU,UAAf,SACE,gCACE,4BAAIZ,EAAQG,MACZ,gCAAQH,EAAQA,eAGpB,sBAAKY,UAAU,MAAf,UACE,qBAAKA,UAAU,MAAf,SACE,qBACEC,IAAG,2CAAsCb,EAAQS,KAA9C,WACHK,IAAKd,EAAQA,YAGjB,sBAAKY,UAAU,MAAf,UAAsBZ,EAAQK,YAA9B,aAEF,qBAAKO,UAAU,yCAAf,SACGZ,EAAQU,sBCnBRK,EAAW,SAAC,GAAc,IAAZ7B,EAAW,EAAXA,KAAW,ECDP,SAACA,GAAU,IAAD,EACbR,mBAAS,CACjCsC,KAAM,GACNC,SAAS,IAH4B,mBAChCC,EADgC,KACzBC,EADyB,KAevC,OATAC,qBAAU,WACR7B,EAAWL,GAAMmC,MAAK,SAACzB,GACrBuB,EAAS,CACPH,KAAMpB,EACNqB,SAAS,SAGZ,CAAC/B,IAEGgC,EDb6BI,CAAgBpC,GAAtCqC,EADsB,EAC5BP,KAAgBC,EADY,EACZA,QAGxB,OADAO,QAAQC,KAAKF,GAEX,qCACE,qBAAKX,UAAU,uBAAuBc,KAAK,QAA3C,SACE,+CACe,sBAAMd,UAAU,gBAAhB,SAAiC1B,SAIjD+B,GAAW,mBAAGL,UAAU,mCAAb,qBAEZ,qBAAKA,UAAU,MAAf,SACGW,EAAStC,OAAS,EACjBsC,EAASxB,KAAI,SAACC,GAAD,OACX,cAAC,EAAD,eAAuCA,GAAhBA,EAAQC,OAGjC,qBAAKW,UAAU,6BAA6Bc,KAAK,QAAjD,iDEpBGC,EAAY,WAAO,IAAD,EACDjD,mBAAS,CAAC,WADT,mBACtBkD,EADsB,KACdnD,EADc,KAG7B,OACE,sBAAKmC,UAAU,YAAf,UACE,4CACA,cAAC,EAAD,CAASnC,UAAWA,IACpB,uBAECmD,EAAO7B,KAAI,SAACb,GAAD,OACV,cAAC,EAAD,CAAqBA,KAAMA,GAAZA,U,MCRvB2C,IAASC,OAAO,cAAC,EAAD,IAAeC,SAASC,eAAe,W","file":"static/js/main.594bce4a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const AddCity = ({ setCities }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setCities((city) => [inputValue, ...city]);\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type={\"text\"} value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n};\n\nAddCity.propTypes = {\n  setCities: PropTypes.func.isRequired,\n};\n","export const getWeather = async (city) => {\n  const url = `https://api.openweathermap.org/data/2.5/forecast?q=${encodeURI(\n    city\n  )}&appid=4141e88d6f7642acd0390d5cba1099ef&units=metric&lang=es`;\n\n  const response = await fetch(url);\n  const { list } = await response.json();\n\n  if (!list) {\n    return [];\n  }\n  return list.map((weather) => {\n    return {\n      id: weather.dt,\n      day: weather.dt_txt,\n      temperature: weather.main.temp,\n      humidity: weather.main.humidity,\n      icon: weather.weather[0].icon,\n      description: weather.weather[0].description,\n      weather: weather.weather[0].main,\n    };\n  });\n};\n","import React from \"react\";\n\nexport const WeatherComponent = (weather) => {\n  return (\n    <div className=\"col-sm-12 col-md-6 col-lg-3 p-2\">\n      <div className=\"card shadow-lg animate__animated animate__fadeIn\">\n        <div className=\"card-body\">\n          <div className=\"row p-1\">\n            <div>\n              <p>{weather.day}</p>\n              <small>{weather.weather}</small>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col\">\n              <img\n                src={`http://openweathermap.org/img/wn/${weather.icon}@2x.png`}\n                alt={weather.weather}\n              />\n            </div>\n            <div className=\"col\">{weather.temperature}&deg;</div>\n          </div>\n          <div className=\"card-footer text-muted text-capitalize\">\n            {weather.description}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useFetchWeather } from \"../hooks/useFetchWeathers\";\nimport { WeatherComponent } from \"./WeatherComponent\";\n\nexport const CityGrid = ({ city }) => {\n  const { data: weathers, loading } = useFetchWeather(city);\n\n  console.log(!weathers);\n  return (\n    <>\n      <div className=\"alert alert-dark p-3\" role=\"alert\">\n        <h3>\n          Climas para: <span className=\"border-bottom\">{city}</span>\n        </h3>\n      </div>\n\n      {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\n\n      <div className=\"row\">\n        {weathers.length > 0 ? (\n          weathers.map((weather) => (\n            <WeatherComponent key={weather.id} {...weather} />\n          ))\n        ) : (\n          <div className=\"alert alert-warning m-auto\" role=\"alert\">\n            No se encontro informaci√≥n\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport { getWeather } from \"../helpers/getWeather\";\n\nexport const useFetchWeather = (city) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getWeather(city).then((response) => {\n      setState({\n        data: response,\n        loading: false,\n      });\n    });\n  }, [city]);\n\n  return state;\n};\n","import React, { useState } from \"react\";\nimport { AddCity } from \"./componentes/AddCity\";\nimport { CityGrid } from \"./componentes/CityGrid\";\n\nexport const CitiesApp = () => {\n  const [cities, setCities] = useState([\"Mexico\"]);\n\n  return (\n    <div className=\"container\">\n      <h2>Cities App</h2>\n      <AddCity setCities={setCities} />\n      <hr />\n\n      {cities.map((city) => (\n        <CityGrid key={city} city={city} />\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport {CitiesApp} from \"./CitiesApp\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<CitiesApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}